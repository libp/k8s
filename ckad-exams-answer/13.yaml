# Create a new PersistentVolumeClaim:
#   Name: pv-volume
#   Class: csi-hostpath-sc
#   Capacity: 10Mi
# Create a new Pod which mounts the PersistentVolumeClaim as a volume:
#   Name: web-server
#   Image: nginx
#   Mount path: /usr/share/nginx/html
# Configure the new Pod to have ReadWriteOnce access on the volume.
# Finally, using kubectl edit or kubectl patch expand the PersistentVolumeClaim to a capacity of 70Mi and record that change

# 解题

# 关键字：
# 链接：

# config env

# deploy nfs

apt install -y nfs-kernel-server
vim /etc/exports
/data *(rw,no_root_squash)
mkdir /data
systemctl restart nfs-server
showmount -e nfs-server
chmod 777 -R /data

# deploy nfs-csi

apt install -y lrzsz 

# upload nfs-csi.zip 
unzip nfs-csi.zip
cd nfs-csi/deploy

kubectl apply -f ./
cd ../
kubectl apply -f csi-hostpath-sc.yaml
kubectl get sc

# answer
# pv-volume.yaml

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pv-volume
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Mi
  storageClassName: csi-hostpath-sc

# kubectl apply -f pv-volume.yaml
# kubectl run web-server --image=nginx --dry-run=client -o yaml > web-server.yaml

# web-server.yaml
apiVersion: v1
kind: Pod
metadata:
  labels:
    run: web-server
  name: web-server
spec:
  volumes:
  - name: pv-volume
    persistentVolumeClaim:
      claimName: pv-volume
  containers:
  - image: nginx
    name: web-server
    volumeMounts:
    - mountPath: /usr/share/nginx/html
      name: pv-volume
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Always


# kubectl apply -f web-server.yaml
# 修改为70Mi
# kubectl edit pvc pv-volume --record=true